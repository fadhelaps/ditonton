// Mocks generated by Mockito 5.0.8 from annotations
// in ditonton/test/helpers/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i17;
import 'dart:convert' as _i8;
import 'dart:typed_data' as _i9;

import 'package:dartz/dartz.dart' as _i12;
import 'package:core/core.dart' as _i18;
import 'package:core/data/datasources/db/database_helper.dart' as _i5;
import 'package:movies/data/datasources/movie_local_data_source.dart' as _i3;
import 'package:movies/data/datasources/movie_remote_data_source.dart' as _i1;
import 'package:movies/data/models/movie_detail_model.dart' as _i13;
import 'package:movies/data/models/movie_model.dart' as _i2;
import 'package:movies/data/models/movie_table.dart' as _i4;
import 'package:movies/domain/entities/movie.dart' as _i19;
import 'package:movies/domain/entities/movie_detail.dart' as _i0;
import 'package:movies/domain/repositories/movie_repository.dart' as _i16;
import 'package:http/src/base_request.dart' as _i20;
import 'package:http/io_client.dart' as _i7;
import 'package:http/src/response.dart' as _i14;
import 'package:mockito/mockito.dart' as _i11;
import 'package:sqflite_sqlcipher/sqflite.dart' as _i6;
import 'package:tv_series/data/models/tv_series_table.dart' as _i15;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither<L, R> extends _i11.Fake implements _i12.Either<L, R> {}

class _FakeMovieDetailResponse extends _i11.Fake
    implements _i13.MovieDetailResponse {}

class _FakeResponse extends _i11.Fake implements _i14.Response {}

class _FakeIOStreamedResponse extends _i11.Fake
    implements _i7.IOStreamedResponse {}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i11.Mock implements _i16.MovieRepository {
  MockMovieRepository() {
    _i11.throwOnMissingStub(this);
  }

  @override
  _i17.Future<_i12.Either<_i18.Failure, List<_i19.Movie>>> getNowPlayingMovies() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingMovies, []),
          returnValue: Future<_i12.Either<_i18.Failure, List<_i19.Movie>>>.value(
              _FakeEither<_i18.Failure, List<_i19.Movie>>())) as _i17.Future<_i12.Either<_i18.Failure, List<_i19.Movie>>>);
  @override
  _i17.Future<_i12.Either<_i18.Failure, List<_i19.Movie>>> getPopularMovies() =>
      (super.noSuchMethod(Invocation.method(#getPopularMovies, []),
          returnValue: Future<_i12.Either<_i18.Failure, List<_i19.Movie>>>.value(
              _FakeEither<_i18.Failure, List<_i19.Movie>>())) as _i17.Future<_i12.Either<_i18.Failure, List<_i19.Movie>>>);
  @override
  _i17.Future<_i12.Either<_i18.Failure, List<_i19.Movie>>> getTopRatedMovies() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedMovies, []),
          returnValue: Future<_i12.Either<_i18.Failure, List<_i19.Movie>>>.value(
              _FakeEither<_i18.Failure, List<_i19.Movie>>())) as _i17.Future<_i12.Either<_i18.Failure, List<_i19.Movie>>>);
  @override
  _i17.Future<_i12.Either<_i18.Failure, _i0.MovieDetail>> getMovieDetail(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieDetail, [id]),
          returnValue: Future<_i12.Either<_i18.Failure, _i0.MovieDetail>>.value(
              _FakeEither<_i18.Failure, _i0.MovieDetail>())) as _i17.Future<_i12.Either<_i18.Failure, _i0.MovieDetail>>);
  @override
  _i17.Future<_i12.Either<_i18.Failure, List<_i19.Movie>>> getMovieRecommendations(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieRecommendations, [id]),
          returnValue: Future<_i12.Either<_i18.Failure, List<_i19.Movie>>>.value(
              _FakeEither<_i18.Failure, List<_i19.Movie>>())) as _i17.Future<_i12.Either<_i18.Failure, List<_i19.Movie>>>);
  @override
  _i17.Future<_i12.Either<_i18.Failure, List<_i19.Movie>>> searchMovies(
          String? query) =>
      (super.noSuchMethod(Invocation.method(#searchMovies, [query]),
          returnValue: Future<_i12.Either<_i18.Failure, List<_i19.Movie>>>.value(
              _FakeEither<_i18.Failure, List<_i19.Movie>>())) as _i17.Future<_i12.Either<_i18.Failure, List<_i19.Movie>>>);
  @override
  _i17.Future<_i12.Either<_i18.Failure, String>> saveWatchlist(
          _i0.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#saveWatchlist, [movie]),
              returnValue: Future<_i12.Either<_i18.Failure, String>>.value(
                  _FakeEither<_i18.Failure, String>()))
          as _i17.Future<_i12.Either<_i18.Failure, String>>);
  @override
  _i17.Future<_i12.Either<_i18.Failure, String>> removeWatchlist(
          _i0.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
              returnValue: Future<_i12.Either<_i18.Failure, String>>.value(
                  _FakeEither<_i18.Failure, String>()))
          as _i17.Future<_i12.Either<_i18.Failure, String>>);
  @override
  _i17.Future<bool> isAddedToWatchlist(int? id) =>
      (super.noSuchMethod(Invocation.method(#isAddedToWatchlist, [id]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<_i12.Either<_i18.Failure, List<_i19.Movie>>> getWatchlistMovies() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistMovies, []),
          returnValue: Future<_i12.Either<_i18.Failure, List<_i19.Movie>>>.value(
              _FakeEither<_i18.Failure, List<_i19.Movie>>())) as _i17.Future<_i12.Either<_i18.Failure, List<_i19.Movie>>>);
}

/// A class which mocks [MovieRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRemoteDataSource extends _i11.Mock
    implements _i1.MovieRemoteDataSource {
  MockMovieRemoteDataSource() {
    _i11.throwOnMissingStub(this);
  }

  @override
  _i17.Future<List<_i2.MovieModel>> getNowPlayingMovies() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingMovies, []),
              returnValue:
                  Future<List<_i2.MovieModel>>.value(<_i2.MovieModel>[]))
          as _i17.Future<List<_i2.MovieModel>>);
  @override
  _i17.Future<List<_i2.MovieModel>> getPopularMovies() => (super.noSuchMethod(
          Invocation.method(#getPopularMovies, []),
          returnValue: Future<List<_i2.MovieModel>>.value(<_i2.MovieModel>[]))
      as _i17.Future<List<_i2.MovieModel>>);
  @override
  _i17.Future<List<_i2.MovieModel>> getTopRatedMovies() => (super.noSuchMethod(
          Invocation.method(#getTopRatedMovies, []),
          returnValue: Future<List<_i2.MovieModel>>.value(<_i2.MovieModel>[]))
      as _i17.Future<List<_i2.MovieModel>>);
  @override
  _i17.Future<_i13.MovieDetailResponse> getMovieDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieDetail, [id]),
              returnValue: Future<_i13.MovieDetailResponse>.value(
                  _FakeMovieDetailResponse()))
          as _i17.Future<_i13.MovieDetailResponse>);
  @override
  _i17.Future<List<_i2.MovieModel>> getMovieRecommendations(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieRecommendations, [id]),
              returnValue:
                  Future<List<_i2.MovieModel>>.value(<_i2.MovieModel>[]))
          as _i17.Future<List<_i2.MovieModel>>);
  @override
  _i17.Future<List<_i2.MovieModel>> searchMovies(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchMovies, [query]),
              returnValue:
                  Future<List<_i2.MovieModel>>.value(<_i2.MovieModel>[]))
          as _i17.Future<List<_i2.MovieModel>>);
}

/// A class which mocks [MovieLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieLocalDataSource extends _i11.Mock
    implements _i3.MovieLocalDataSource {
  MockMovieLocalDataSource() {
    _i11.throwOnMissingStub(this);
  }

  @override
  _i17.Future<String> insertWatchlist(_i4.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlist, [movie]),
          returnValue: Future<String>.value('')) as _i17.Future<String>);
  @override
  _i17.Future<String> removeWatchlist(_i4.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
          returnValue: Future<String>.value('')) as _i17.Future<String>);
  @override
  _i17.Future<_i4.MovieTable?> getMovieById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieById, [id]),
              returnValue: Future<_i4.MovieTable?>.value())
          as _i17.Future<_i4.MovieTable?>);
  @override
  _i17.Future<List<_i4.MovieTable>> getWatchlistMovies() => (super.noSuchMethod(
          Invocation.method(#getWatchlistMovies, []),
          returnValue: Future<List<_i4.MovieTable>>.value(<_i4.MovieTable>[]))
      as _i17.Future<List<_i4.MovieTable>>);
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i11.Mock implements _i5.DatabaseHelper {
  MockDatabaseHelper() {
    _i11.throwOnMissingStub(this);
  }

  @override
  _i17.Future<_i6.Database?> get database =>
      (super.noSuchMethod(Invocation.getter(#database),
              returnValue: Future<_i6.Database?>.value())
          as _i17.Future<_i6.Database?>);
  @override
  _i17.Future<int> insertWatchlist(_i4.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlist, [movie]),
          returnValue: Future<int>.value(0)) as _i17.Future<int>);
  @override
  _i17.Future<int> removeWatchlist(_i4.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
          returnValue: Future<int>.value(0)) as _i17.Future<int>);
  @override
  _i17.Future<Map<String, dynamic>?> getMovieById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieById, [id]),
              returnValue: Future<Map<String, dynamic>?>.value())
          as _i17.Future<Map<String, dynamic>?>);
  @override
  _i17.Future<List<Map<String, dynamic>>> getWatchlistMovies() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistMovies, []),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i17.Future<List<Map<String, dynamic>>>);
  @override
  _i17.Future<int> insertWatchlistTV(_i15.TvSeriesTable? tv) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlistTV, [tv]),
          returnValue: Future<int>.value(0)) as _i17.Future<int>);
  @override
  _i17.Future<int> removeWatchlistTV(_i15.TvSeriesTable? tv) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlistTV, [tv]),
          returnValue: Future<int>.value(0)) as _i17.Future<int>);
  @override
  _i17.Future<Map<String, dynamic>?> getTvById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvById, [id]),
              returnValue: Future<Map<String, dynamic>?>.value())
          as _i17.Future<Map<String, dynamic>?>);
  @override
  _i17.Future<List<Map<String, dynamic>>> getWatchlistTv() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistTv, []),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i17.Future<List<Map<String, dynamic>>>);
}

/// A class which mocks [IOClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockIOClient extends _i11.Mock implements _i7.IOClient {
  MockIOClient() {
    _i11.throwOnMissingStub(this);
  }

  @override
  _i17.Future<_i14.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i14.Response>.value(_FakeResponse()))
          as _i17.Future<_i14.Response>);
  @override
  _i17.Future<_i14.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i14.Response>.value(_FakeResponse()))
          as _i17.Future<_i14.Response>);
  @override
  _i17.Future<_i14.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i14.Response>.value(_FakeResponse()))
          as _i17.Future<_i14.Response>);
  @override
  _i17.Future<_i14.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i14.Response>.value(_FakeResponse()))
          as _i17.Future<_i14.Response>);
  @override
  _i17.Future<_i14.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i14.Response>.value(_FakeResponse()))
          as _i17.Future<_i14.Response>);
  @override
  _i17.Future<_i14.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i14.Response>.value(_FakeResponse()))
          as _i17.Future<_i14.Response>);
  @override
  _i17.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i17.Future<String>);
  @override
  _i17.Future<_i9.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i9.Uint8List>.value(_i9.Uint8List(0)))
          as _i17.Future<_i9.Uint8List>);
  @override
  _i17.Future<_i7.IOStreamedResponse> send(_i20.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue: Future<_i7.IOStreamedResponse>.value(
                  _FakeIOStreamedResponse()))
          as _i17.Future<_i7.IOStreamedResponse>);
  @override
  String toString() => super.toString();
}
